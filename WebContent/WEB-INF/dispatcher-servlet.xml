<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context-3.0.xsd">
						
						
<!-- helloController라는 이름으로 bean객체를 생성한다. -->
<!-- spring container에 helloController의 이름을 가진 객체를 미리 생성해놓는다. -->
	<bean id="helloController" class="controller.HelloController"/> 

<!-- viewResolver을 객체생성한다. -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/view/"/>
		<property name="suffix" value=".jsp"/>
	</bean>				

<!-- 예제001 자바빈 객체 생성코드. 글쓰기 관련 예제-->
	<!-- newArticleController라는 이름으로 bean객체를 생성한다. -->
	<bean id="newArticleController" class="controller.NewArticleController"
		p:articleService-ref="articleService"/>
	<!-- articleService라는 이름으로 bean객체를 생성한다. -->	
	<bean id="articleService" class="service.ArticleService"/>


<!-- 예제002 자바빈 객체 생성코드. 리스트자바빈을 이용한 주문예제.? -->	
	<bean id="orderController" class="controller.OrderController"/>

<!-- 예제003 자바빈 객체 생성 코드. searchController라는 이름으로 bean객체를 생성한다 -->
	<bean id="searchController" class="controller.SearchController"/>
	
<!-- 예제004 자바빈 객체 생성 코드. cookieController 라는 이름으로 bean객체를 생성한다-->
	<bean id="cookieController" class="controller.CookieController"/>

<!-- 예제005 자바빈 객체 생성 코드. HeaderController bean객체를 생성한다-->
	<bean class="controller.HeaderController"/>

<!-- 예제006 자바빈 객체 생성 코드.  GameSearchController라는 bean객체를 생성한다. -->
	<bean class="controller.GameSearchController"
	 p:searchService-ref="searchService"/>
	<!-- p는 property, searchservice는 setSearchService메서드. -->	
	<!-- p:searchService는 setSearchService를 가리키고, 그 셋메서드에 넣는 객체는 service.SearchService 의 searchService이다.  -->

	<!-- searchService라는 이름을 갖는  bean객체를 생성한다 -->
	<bean id="searchService" class="service.SearchService"/>



<!-- 예제007 자바빈 객체 생성 코드. 회원가입 비슷한 예제. 유효성검증을 함. -->
	<bean class="controller.CreateAccountController"/>
	
	<!-- 서버측에서 유효성 검증을 하는 유효성검증 객체 생성 코드 -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames"> <!-- setBasenames() 메서드가 있고, 리스트 객체를 받는다. -->
			<list>
				<value>messages.validation</value> <!-- 리스트 객체에는 message.validation이라는 값이 들어있다. -->
			</list>
		</property>
	</bean>
	
	
<!-- 예제008 자바빈 객체 생성 코드. REST방식의 url매칭? -->	
	<bean class="controller.GameInfoController"/>
	
	<!-- 이 코드가 있어야 /game/@!#! 의 경로도 찾는다. -->
	<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
		<property name="alwaysUseFullPath" value="true"/>
		<!-- 예제013 이벤트 날짜 인터셉터 예제 -->
		<property name="interceptors">
			<list>
				<ref bean="eventExpirationCheckInterceptor"/>
			</list>
		</property>
	</bean>
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="alwaysUseFullPath" value="true"/>
	</bean>
	
<!-- 예제009 자바빈 객체 생성코드. REST방식의 url매칭? -->	
	<bean class="controller.CharacterInfoController"/>
	
<!-- 예제010 자바빈 객체 생성코드. 로그인관련 유효성검증 예제같음. -->	
	<bean id="authenticator" class="service.MockAuthenticator"
		p:commonLogger-ref="commonLogger"/> <!-- setCommonLogger()에 넣는 객체는 common.CommonLoggerImpl이다. -->
		
	<bean class="controller.LoginController">
		<property name="authenticator" ref="authenticator"/>
	</bean>	
	
<!-- 예제011 자바빈 객체 생성코드. 파일관련 예제. -->		
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="EUC-KR"/>
	</bean>
	<bean class="controller.ReportSubmissionController"/>
	
	
	
<!-- 예제012 자바빈 객체 생성코드. 전송된 날짜 스트링을 Date객체로 변환하기 -->	
	<bean class="controller.QueryLogController"/>
	
<!-- 예제013 자바빈 객체 생성코드. 인터셉터 예제. 이벤트 날짜를 체크하여 기간중이면 이벤트리스트화면, 만료면 만료화면-->	
	<bean class="controller.EventController"/>
	<bean id="eventExpirationCheckInterceptor" class="interceptor.EventExpirationCheckInterceptor"/>

		
<!-- 예제012와 013의 사이에 있는 코드-->			
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="alwaysUseFullPath" value="true"/>
		<property name="webBindingInitializer" >
		<bean class="binder.CustomWebBindingInitializer"/>
		</property>
	</bean>     

<!-- 예제014 자바빈 객체 생성코드. 사칙연산 예외처리 -->		
	<bean class="controller.ArithmeticOperatorController"/>
	
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
			<!-- ArithmeticException예외일 경우에는 error/mathException여기서 처리하도록 한다.  -->
				<prop key="java.lang.ArithmeticException"> 
					error/mathException
				</prop>
			<!-- Exception예외일 경우에는 error/exception여기서 처리하도록 한다.  -->	
				<prop key="java.lang.Exception">
					error/exception
				</prop>
			</props>
		</property>
	</bean>

<!-- 예제015 자바빈 객체 생성코드. 웹표준 코딩??xml과 json어쩌구 코드 -->	
	<bean class="controller.SimpleConverterController"/>
										
</beans>
	